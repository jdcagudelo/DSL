/**
 */
package sintaxisabstracta.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import sintaxisabstracta.util.SintaxisabstractaAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class SintaxisabstractaItemProviderAdapterFactory extends SintaxisabstractaAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public SintaxisabstractaItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link sintaxisabstracta.Tabla} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TablaItemProvider tablaItemProvider;

	/**
	 * This creates an adapter for a {@link sintaxisabstracta.Tabla}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTablaAdapter() {
		if (tablaItemProvider == null) {
			tablaItemProvider = new TablaItemProvider(this);
		}

		return tablaItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link sintaxisabstracta.Campo} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CampoItemProvider campoItemProvider;

	/**
	 * This creates an adapter for a {@link sintaxisabstracta.Campo}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCampoAdapter() {
		if (campoItemProvider == null) {
			campoItemProvider = new CampoItemProvider(this);
		}

		return campoItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link sintaxisabstracta.Cardinalidad} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CardinalidadItemProvider cardinalidadItemProvider;

	/**
	 * This creates an adapter for a {@link sintaxisabstracta.Cardinalidad}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCardinalidadAdapter() {
		if (cardinalidadItemProvider == null) {
			cardinalidadItemProvider = new CardinalidadItemProvider(this);
		}

		return cardinalidadItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link sintaxisabstracta.Tipo_Dato} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Tipo_DatoItemProvider tipo_DatoItemProvider;

	/**
	 * This creates an adapter for a {@link sintaxisabstracta.Tipo_Dato}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTipo_DatoAdapter() {
		if (tipo_DatoItemProvider == null) {
			tipo_DatoItemProvider = new Tipo_DatoItemProvider(this);
		}

		return tipo_DatoItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link sintaxisabstracta.String} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StringItemProvider stringItemProvider;

	/**
	 * This creates an adapter for a {@link sintaxisabstracta.String}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStringAdapter() {
		if (stringItemProvider == null) {
			stringItemProvider = new StringItemProvider(this);
		}

		return stringItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link sintaxisabstracta.Numeric} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NumericItemProvider numericItemProvider;

	/**
	 * This creates an adapter for a {@link sintaxisabstracta.Numeric}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNumericAdapter() {
		if (numericItemProvider == null) {
			numericItemProvider = new NumericItemProvider(this);
		}

		return numericItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link sintaxisabstracta.Date} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DateItemProvider dateItemProvider;

	/**
	 * This creates an adapter for a {@link sintaxisabstracta.Date}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDateAdapter() {
		if (dateItemProvider == null) {
			dateItemProvider = new DateItemProvider(this);
		}

		return dateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link sintaxisabstracta.Uno} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UnoItemProvider unoItemProvider;

	/**
	 * This creates an adapter for a {@link sintaxisabstracta.Uno}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUnoAdapter() {
		if (unoItemProvider == null) {
			unoItemProvider = new UnoItemProvider(this);
		}

		return unoItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link sintaxisabstracta.Unomuchos} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UnomuchosItemProvider unomuchosItemProvider;

	/**
	 * This creates an adapter for a {@link sintaxisabstracta.Unomuchos}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUnomuchosAdapter() {
		if (unomuchosItemProvider == null) {
			unomuchosItemProvider = new UnomuchosItemProvider(this);
		}

		return unomuchosItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link sintaxisabstracta.Cero} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CeroItemProvider ceroItemProvider;

	/**
	 * This creates an adapter for a {@link sintaxisabstracta.Cero}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCeroAdapter() {
		if (ceroItemProvider == null) {
			ceroItemProvider = new CeroItemProvider(this);
		}

		return ceroItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link sintaxisabstracta.Ceromuchos} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CeromuchosItemProvider ceromuchosItemProvider;

	/**
	 * This creates an adapter for a {@link sintaxisabstracta.Ceromuchos}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCeromuchosAdapter() {
		if (ceromuchosItemProvider == null) {
			ceromuchosItemProvider = new CeromuchosItemProvider(this);
		}

		return ceromuchosItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link sintaxisabstracta.Muchos} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MuchosItemProvider muchosItemProvider;

	/**
	 * This creates an adapter for a {@link sintaxisabstracta.Muchos}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMuchosAdapter() {
		if (muchosItemProvider == null) {
			muchosItemProvider = new MuchosItemProvider(this);
		}

		return muchosItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link sintaxisabstracta.Cerouno} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CerounoItemProvider cerounoItemProvider;

	/**
	 * This creates an adapter for a {@link sintaxisabstracta.Cerouno}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCerounoAdapter() {
		if (cerounoItemProvider == null) {
			cerounoItemProvider = new CerounoItemProvider(this);
		}

		return cerounoItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link sintaxisabstracta.Relaciones} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RelacionesItemProvider relacionesItemProvider;

	/**
	 * This creates an adapter for a {@link sintaxisabstracta.Relaciones}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRelacionesAdapter() {
		if (relacionesItemProvider == null) {
			relacionesItemProvider = new RelacionesItemProvider(this);
		}

		return relacionesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link sintaxisabstracta.NewClass} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NewClassItemProvider newClassItemProvider;

	/**
	 * This creates an adapter for a {@link sintaxisabstracta.NewClass}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNewClassAdapter() {
		if (newClassItemProvider == null) {
			newClassItemProvider = new NewClassItemProvider(this);
		}

		return newClassItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (tablaItemProvider != null) tablaItemProvider.dispose();
		if (campoItemProvider != null) campoItemProvider.dispose();
		if (cardinalidadItemProvider != null) cardinalidadItemProvider.dispose();
		if (tipo_DatoItemProvider != null) tipo_DatoItemProvider.dispose();
		if (stringItemProvider != null) stringItemProvider.dispose();
		if (numericItemProvider != null) numericItemProvider.dispose();
		if (dateItemProvider != null) dateItemProvider.dispose();
		if (unoItemProvider != null) unoItemProvider.dispose();
		if (unomuchosItemProvider != null) unomuchosItemProvider.dispose();
		if (ceroItemProvider != null) ceroItemProvider.dispose();
		if (ceromuchosItemProvider != null) ceromuchosItemProvider.dispose();
		if (muchosItemProvider != null) muchosItemProvider.dispose();
		if (cerounoItemProvider != null) cerounoItemProvider.dispose();
		if (relacionesItemProvider != null) relacionesItemProvider.dispose();
		if (newClassItemProvider != null) newClassItemProvider.dispose();
	}

}
